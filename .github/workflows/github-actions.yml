name: GitHub Actions for pega helm chart

env:
  HELM_URL: https://get.helm.sh
  HELM_TGZ: helm-v3.2.4-linux-amd64.tar.gz
  YAMLLINT_VERSION: 1.15.0
  GO_VERSION: 1.13.1


on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]
  # schedule:
  #   - cron:  '0 12 * * *'

jobs:
  run-build-job:
    runs-on: ubuntu-18.04
    if: always()
    steps:
      - name: Install Helm
        run: |
          wget -q ${{ env.HELM_URL }}/${{ env.HELM_TGZ }}
          tar xzf ${{ env.HELM_TGZ }}
          PATH=`pwd`/linux-amd64/:$PATH
      
      - name: Install yamllint
        run: |
          sudo pip install yamllint=="${{ env.YAMLLINT_VERSION }}"
      
      - name: Install node
        uses: actions/setup-node@v2
        with:
          node-version: lts/*
      
      - name: Install npm dependencies
        run: |    
          npm install -g --save remark-cli to-vfile remark-preset-lint-recommended remark-validate-links remark-lint-no-dead-urls remark-message-control remark-preset-lint-markdown-style-guide remark-lint
      
      - name: Install GO
        uses: actions/setup-go@v2
        with:
          go-version: ${{ env.GO_VERSION }}
      - run: export  PATH=$PATH:/usr/local/go/bin

      - name: Check out repository code
        uses: actions/checkout@v2
      
      - run: |
          ls
      
      - name: run yamllint
        run: |
          yamllint -c .yamllint.yml -s $(find . -type f -name "Chart.yaml")
          yamllint -c .yamllint.yml -s $(find . -type f -name "values*.yaml")
          remark -i .remark_ignore -f -u validate-links .
      
      - name: Now load the helm dependencies
        run: |
          make dependencies

      - run: |
          kubectl version
      
      - name: Prepare for GO helm unit tests
        run: |
          mkdir $GITHUB_WORKSPACE/terratest/bin
          export GOPATH=$GITHUB_WORKSPACE/terratest
          curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
          export PATH=$PATH:$GITHUB_WORKSPACE/terratest/bin
          cd terratest/src/test
          dep ensure
          # grep "FAIL" -A 8 - filter unnecessary logs from the final output but show failing tests
          #  ; test ${PIPESTATUS[0]} -eq 0 - check if go test was finished success. Without it pipe return exit code from last command.
          go test test/pega | grep "FAIL" -A 8 ; test ${PIPESTATUS[0]} -eq 0
          go test terratest/src/test/addons | grep "FAIL" -A 8 ; test ${PIPESTATUS[0]} -eq 0
          go test terratest/src/test/backingservices  | grep "FAIL" -A 8 ; test ${PIPESTATUS[0]} -eq 0

      - name: before deploy step 1
        run: |
          cd $GITHUB_WORKSPACE
          chmod 777 before_deploy.sh
          ./before_deploy.sh

      - name: before deploy step 2
        run: |
          make examples


